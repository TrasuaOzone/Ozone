// ‚ö° Thay ƒë·ªïi version n√†y m·ªói l·∫ßn b·∫°n c·∫≠p nh·∫≠t website
const CACHE_VERSION = 'v20250829-1';
const CACHE_NAME = `odaycogi-cache-${CACHE_VERSION}`;

// Danh s√°ch c√°c file c·∫ßn cache tr∆∞·ªõc (precache)
const ASSETS = [
  '/', // trang g·ªëc
  '/index.html',
  '/manifest.json',
  '/images/icon-192.png',
  '/images/icon-512.png',
  '/images/LG.png',
  '/trasua.html',
  '/dich-vu.html',
  '/dang-ky.html',
  '/bando.html',
  '/cham-soc-khach-hang.html',
  '/tra-cuu.html'
  // n·∫øu c√≥ CSS/JS ri√™ng th√¨ th√™m v√†o ƒë√¢y
];

// üì• C√†i ƒë·∫∑t SW & cache file tƒ©nh
self.addEventListener('install', event => {
  console.log(`üì• Installing SW ${CACHE_VERSION}`);
  self.skipWaiting(); // k√≠ch ho·∫°t ngay
  event.waitUntil(
    caches.open(CACHE_NAME).then(cache => cache.addAll(ASSETS))
  );
});

// ‚ö° K√≠ch ho·∫°t: x√≥a cache c≈©
self.addEventListener('activate', event => {
  console.log(`‚ö° Activating SW ${CACHE_VERSION}`);
  event.waitUntil(
    caches.keys().then(keys =>
      Promise.all(
        keys.filter(key => key !== CACHE_NAME)
            .map(key => {
              console.log(`üóë X√≥a cache c≈©: ${key}`);
              return caches.delete(key);
            })
      )
    )
  );
  self.clients.claim(); // √°p d·ª•ng ngay
});

// üåê Chi·∫øn l∆∞·ª£c: Network First, fallback Cache
self.addEventListener('fetch', event => {
  if (event.request.method !== 'GET') return; // ch·ªâ cache GET
  event.respondWith(
    fetch(event.request)
      .then(res => {
        // C·∫≠p nh·∫≠t cache v·ªõi d·ªØ li·ªáu m·ªõi
        const clone = res.clone();
        caches.open(CACHE_NAME).then(cache => cache.put(event.request, clone));
        return res;
      })
      .catch(() => caches.match(event.request)) // n·∫øu offline th√¨ l·∫•y cache
  );
});
